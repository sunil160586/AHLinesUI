{"remainingRequest":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\AHLinesUI\\node_modules\\rxjs\\_esm5\\internal\\operators\\groupBy.js","dependencies":[{"path":"D:\\AHLinesUI\\node_modules\\rxjs\\_esm5\\internal\\operators\\groupBy.js","mtime":499162500000},{"path":"D:\\AHLinesUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522837491125},{"path":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Subscriber } from '../Subscriber';\r\nimport { Subscription } from '../Subscription';\r\nimport { Observable } from '../Observable';\r\nimport { Subject } from '../Subject';\r\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\r\n    return function (source) {\r\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\r\n    };\r\n}\r\nvar GroupByOperator = /*@__PURE__*/ (function () {\r\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\r\n        this.keySelector = keySelector;\r\n        this.elementSelector = elementSelector;\r\n        this.durationSelector = durationSelector;\r\n        this.subjectSelector = subjectSelector;\r\n    }\r\n    GroupByOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\r\n    };\r\n    return GroupByOperator;\r\n}());\r\nvar GroupBySubscriber = (function (_super) {\r\n    tslib_1.__extends(GroupBySubscriber, _super);\r\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.keySelector = keySelector;\r\n        _this.elementSelector = elementSelector;\r\n        _this.durationSelector = durationSelector;\r\n        _this.subjectSelector = subjectSelector;\r\n        _this.groups = null;\r\n        _this.attemptedToUnsubscribe = false;\r\n        _this.count = 0;\r\n        return _this;\r\n    }\r\n    GroupBySubscriber.prototype._next = function (value) {\r\n        var key;\r\n        try {\r\n            key = this.keySelector(value);\r\n        }\r\n        catch (err) {\r\n            this.error(err);\r\n            return;\r\n        }\r\n        this._group(value, key);\r\n    };\r\n    GroupBySubscriber.prototype._group = function (value, key) {\r\n        var groups = this.groups;\r\n        if (!groups) {\r\n            groups = this.groups = new Map();\r\n        }\r\n        var group = groups.get(key);\r\n        var element;\r\n        if (this.elementSelector) {\r\n            try {\r\n                element = this.elementSelector(value);\r\n            }\r\n            catch (err) {\r\n                this.error(err);\r\n            }\r\n        }\r\n        else {\r\n            element = value;\r\n        }\r\n        if (!group) {\r\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\r\n            groups.set(key, group);\r\n            var groupedObservable = new GroupedObservable(key, group, this);\r\n            this.destination.next(groupedObservable);\r\n            if (this.durationSelector) {\r\n                var duration = void 0;\r\n                try {\r\n                    duration = this.durationSelector(new GroupedObservable(key, group));\r\n                }\r\n                catch (err) {\r\n                    this.error(err);\r\n                    return;\r\n                }\r\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\r\n            }\r\n        }\r\n        if (!group.closed) {\r\n            group.next(element);\r\n        }\r\n    };\r\n    GroupBySubscriber.prototype._error = function (err) {\r\n        var groups = this.groups;\r\n        if (groups) {\r\n            groups.forEach(function (group, key) {\r\n                group.error(err);\r\n            });\r\n            groups.clear();\r\n        }\r\n        this.destination.error(err);\r\n    };\r\n    GroupBySubscriber.prototype._complete = function () {\r\n        var groups = this.groups;\r\n        if (groups) {\r\n            groups.forEach(function (group, key) {\r\n                group.complete();\r\n            });\r\n            groups.clear();\r\n        }\r\n        this.destination.complete();\r\n    };\r\n    GroupBySubscriber.prototype.removeGroup = function (key) {\r\n        this.groups.delete(key);\r\n    };\r\n    GroupBySubscriber.prototype.unsubscribe = function () {\r\n        if (!this.closed) {\r\n            this.attemptedToUnsubscribe = true;\r\n            if (this.count === 0) {\r\n                _super.prototype.unsubscribe.call(this);\r\n            }\r\n        }\r\n    };\r\n    return GroupBySubscriber;\r\n}(Subscriber));\r\nvar GroupDurationSubscriber = (function (_super) {\r\n    tslib_1.__extends(GroupDurationSubscriber, _super);\r\n    function GroupDurationSubscriber(key, group, parent) {\r\n        var _this = _super.call(this, group) || this;\r\n        _this.key = key;\r\n        _this.group = group;\r\n        _this.parent = parent;\r\n        return _this;\r\n    }\r\n    GroupDurationSubscriber.prototype._next = function (value) {\r\n        this.complete();\r\n    };\r\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\r\n        var _a = this, parent = _a.parent, key = _a.key;\r\n        this.key = this.parent = null;\r\n        if (parent) {\r\n            parent.removeGroup(key);\r\n        }\r\n    };\r\n    return GroupDurationSubscriber;\r\n}(Subscriber));\r\nvar GroupedObservable = (function (_super) {\r\n    tslib_1.__extends(GroupedObservable, _super);\r\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\r\n        var _this = _super.call(this) || this;\r\n        _this.key = key;\r\n        _this.groupSubject = groupSubject;\r\n        _this.refCountSubscription = refCountSubscription;\r\n        return _this;\r\n    }\r\n    GroupedObservable.prototype._subscribe = function (subscriber) {\r\n        var subscription = new Subscription();\r\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\r\n        if (refCountSubscription && !refCountSubscription.closed) {\r\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\r\n        }\r\n        subscription.add(groupSubject.subscribe(subscriber));\r\n        return subscription;\r\n    };\r\n    return GroupedObservable;\r\n}(Observable));\r\nexport { GroupedObservable };\r\nvar InnerRefCountSubscription = (function (_super) {\r\n    tslib_1.__extends(InnerRefCountSubscription, _super);\r\n    function InnerRefCountSubscription(parent) {\r\n        var _this = _super.call(this) || this;\r\n        _this.parent = parent;\r\n        parent.count++;\r\n        return _this;\r\n    }\r\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\r\n        var parent = this.parent;\r\n        if (!parent.closed && !this.closed) {\r\n            _super.prototype.unsubscribe.call(this);\r\n            parent.count -= 1;\r\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\r\n                parent.unsubscribe();\r\n            }\r\n        }\r\n    };\r\n    return InnerRefCountSubscription;\r\n}(Subscription));\r\n//# sourceMappingURL=groupBy.js.map\r\n",null]}