{"remainingRequest":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\AHLinesUI\\node_modules\\ngx-facebook\\dist\\esm\\providers\\facebook.js","dependencies":[{"path":"D:\\AHLinesUI\\node_modules\\ngx-facebook\\dist\\esm\\providers\\facebook.js","mtime":1492550706000},{"path":"D:\\AHLinesUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522837491125},{"path":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\n/**\n * @shortdesc\n * Angular 2 service to inject to use Facebook's SDK\n * @description\n * You only need to inject this service in your application if you aren't using [`FacebookModule`](../facebook-module).\n * @usage\n * ```typescript\n * import { FacebookService, InitParams } from 'ng2-facebook-sdk';\n *\n * constructor(private fb: FacebookService) {\n *\n *   const params: InitParams = {\n *\n *   };\n *\n *   fb.init(params);\n *\n * }\n * ```\n */\nvar FacebookService = /*@__PURE__*/ (function () {\n    function FacebookService() {\n    }\n    /**\n     * This method is used to initialize and setup the SDK.\n     * @param params {InitParams} Initialization parameters\n     * @returns {Promise<any>}\n     */\n    FacebookService.prototype.init = function (params) {\n        try {\n            return Promise.resolve(FB.init(params));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    };\n    /**\n     * This method lets you make calls to the Graph API\n     * @usage\n     * ```typescript\n     * this.fb.api('somepath')\n     *   .then(res => console.log(res))\n     *   .catch(e => console.log(e));\n     * ```\n     * @param path {string} The Graph API endpoint path that you want to call.\n     * @param [method=get] {string} The HTTP method that you want to use for the API request.\n     * @param [params] {Object} An object consisting of any parameters that you want to pass into your Graph API call.\n     * @returns {Promise<any>}\n     */\n    FacebookService.prototype.api = function (path, method, params) {\n        if (method === void 0) {\n            method = 'get';\n        }\n        if (params === void 0) {\n            params = {};\n        }\n        return new Promise(function (resolve, reject) {\n            try {\n                FB.api(path, method, params, function (response) {\n                    if (!response) {\n                        reject();\n                    }\n                    else if (response.error) {\n                        reject(response.error);\n                    }\n                    else {\n                        resolve(response);\n                    }\n                });\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    };\n    /**\n     * This method is used to trigger different forms of Facebook created UI dialogs.\n     * These dialogs include:\n     * - Share dialog\n     * - Login dialog\n     * - Add page tab dialog\n     * - Requests dialog\n     * - Send dialog\n     * - Payments dialog\n     * - Go Live dialog\n     * @param params {UIParams} A collection of parameters that control which dialog is loaded, and relevant settings.\n     * @returns {Promise<UIResponse>}\n     */\n    FacebookService.prototype.ui = function (params) {\n        return new Promise(function (resolve, reject) {\n            try {\n                FB.ui(params, function (response) {\n                    if (!response)\n                        reject();\n                    else if (response.error)\n                        reject(response.error);\n                    else\n                        resolve(response);\n                });\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    };\n    /**\n     * This method allows you to determine if a user is logged in to Facebook and has authenticated your app.\n     * @returns {Promise<LoginStatus>}\n     */\n    FacebookService.prototype.getLoginStatus = function () {\n        return new Promise(function (resolve, reject) {\n            try {\n                FB.getLoginStatus(function (response) {\n                    if (!response) {\n                        reject();\n                    }\n                    else {\n                        resolve(response);\n                    }\n                });\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    };\n    /**\n     * Login the user\n     * @usage\n     * ```typescript\n     * // login without options\n     * this.fb.login()\n     *   .then((response: LoginResponse) => console.log('Logged in', response))\n     *   .catch(e => console.error('Error logging in'));\n     *\n     * // login with options\n     * const options: LoginOptions = {\n     *   scope: 'public_profile,user_friends,email,pages_show_list',\n     *   return_scopes: true,\n     *   enable_profile_selector: true\n     * };\n     * this.fb.login(options)\n     *   .then(...)\n     *   .catch(...);\n     * ```\n     * @param [options] {LoginOptions} Login options\n     * @returns {Promise<LoginResponse>} returns a promise that resolves with [LoginResponse](../login-response) object, or rejects with an error\n     */\n    FacebookService.prototype.login = function (options) {\n        return new Promise(function (resolve, reject) {\n            try {\n                FB.login(function (response) {\n                    if (response.authResponse) {\n                        resolve(response);\n                    }\n                    else {\n                        reject();\n                    }\n                }, options);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    };\n    /**\n     * Logout the user\n     * @usage\n     * ```typescript\n     * this.fb.logout().then(() => console.log('Logged out!'));\n     * ```\n     * @returns {Promise<any>} returns a promise that resolves when the user is logged out\n     */\n    FacebookService.prototype.logout = function () {\n        return new Promise(function (resolve, reject) {\n            try {\n                FB.logout(function (response) {\n                    resolve(response);\n                });\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    };\n    /**\n     * This synchronous function returns back the current authResponse.\n     * @usage\n     * ```typescript\n     * import { AuthResponse, FacebookService } from 'ng2-facebook-sdk';\n     *\n     * ...\n     *\n     * const authResponse: AuthResponse = this.fb.getAuthResponse();\n     * ```\n     * @returns {AuthResponse} returns an [AuthResponse](../auth-response) object\n     */\n    FacebookService.prototype.getAuthResponse = function () {\n        try {\n            return FB.getAuthResponse();\n        }\n        catch (e) {\n            console.error('ng2-facebook-sdk: ', e);\n        }\n    };\n    return FacebookService;\n}());\nexport { FacebookService };\n//# sourceMappingURL=facebook.js.map \n",null]}