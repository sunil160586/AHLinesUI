{"remainingRequest":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\AHLinesUI\\node_modules\\ng2-adsense\\fesm5\\ng2-adsense.js","dependencies":[{"path":"D:\\AHLinesUI\\node_modules\\ng2-adsense\\fesm5\\ng2-adsense.js","mtime":499162500000},{"path":"D:\\AHLinesUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522837491125},{"path":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { InjectionToken, ChangeDetectionStrategy, Component, Inject, Input, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar ADSENSE_TOKEN = new InjectionToken('AdsenseConfig');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar AdsenseComponent = /*@__PURE__*/ (function () {\n    function AdsenseComponent(config) {\n        this.config = config;\n        /**\n         * can be manually set if you need all ads on a page to have same id page-xxx\n         */\n        this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;\n    }\n    /**\n     * @return {?}\n     */\n    AdsenseComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var config = this.config;\n            /**\n             * @template T\n             * @param {?} source\n             * @param {?} defaultValue\n             * @return {?}\n             */\n            function use(source, defaultValue) {\n                return config && source !== undefined ? source : defaultValue;\n            }\n            this.adClient = use(this.adClient, config.adClient);\n            this.adSlot = use(this.adSlot, config.adSlot);\n            this.adFormat = use(this.adFormat, config.adFormat || 'auto');\n            this.display = use(this.display, config.display || 'block');\n            this.width = use(this.width, config.width);\n            this.height = use(this.height, config.height);\n            this.layout = use(this.layout, config.layout);\n            this.layoutKey = use(this.layoutKey, config.layoutKey);\n            this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);\n            this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);\n            this.adtest = use(this.adtest, config.adtest);\n        };\n    /**\n     * @return {?}\n     */\n    AdsenseComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var iframe = this.ins.nativeElement.querySelector('iframe');\n            if (iframe && iframe.contentWindow) {\n                iframe.src = 'about:blank';\n                iframe.remove();\n            }\n        };\n    /**\n     * attempts to push the ad twice. Usually if one doesn't work the other\n     * will depeding on if the browser has the adsense code cached and\n     * if its the first page to be loaded\n     */\n    /**\n     * attempts to push the ad twice. Usually if one doesn't work the other\n     * will depeding on if the browser has the adsense code cached and\n     * if its the first page to be loaded\n     * @return {?}\n     */\n    AdsenseComponent.prototype.ngAfterViewInit = /**\n     * attempts to push the ad twice. Usually if one doesn't work the other\n     * will depeding on if the browser has the adsense code cached and\n     * if its the first page to be loaded\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /** @type {?} */\n            var res = this.push();\n            if (res instanceof TypeError) {\n                setTimeout(function () { return _this.push(); }, this.timeOutRetry);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    AdsenseComponent.prototype.push = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var p = {};\n            if (this.pageLevelAds) {\n                p.google_ad_client = this.adClient;\n                p.enable_page_level_ads = true;\n            }\n            try {\n                /** @type {?} */\n                var adsbygoogle = window['adsbygoogle'];\n                adsbygoogle.push(p);\n                return true;\n            }\n            catch (e) {\n                return e;\n            }\n        };\n    return AdsenseComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar AdsenseModule = /*@__PURE__*/ (function () {\n    function AdsenseModule() {\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    AdsenseModule.forRoot = /**\n     * @param {?=} config\n     * @return {?}\n     */\n        function (config) {\n            if (config === void 0) {\n                config = {};\n            }\n            return {\n                ngModule: AdsenseModule,\n                providers: [{ provide: ADSENSE_TOKEN, useValue: config }],\n            };\n        };\n    return AdsenseModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { AdsenseComponent, AdsenseModule, ADSENSE_TOKEN };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64, \n",null]}