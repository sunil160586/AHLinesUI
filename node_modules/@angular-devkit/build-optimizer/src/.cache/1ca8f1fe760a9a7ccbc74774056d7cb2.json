{"remainingRequest":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\AHLinesUI\\node_modules\\ngx-slick\\index.js","dependencies":[{"path":"D:\\AHLinesUI\\node_modules\\ngx-slick\\index.js","mtime":1500981407000},{"path":"D:\\AHLinesUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522837491125},{"path":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Directive, ElementRef, EventEmitter, Host, Input, NgModule, NgZone, Output, forwardRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n/**\n * Slick component\n */\nvar SlickComponent = /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     * @param {?} el\n     * @param {?} zone\n     */\n    function SlickComponent(el, zone) {\n        this.el = el;\n        this.zone = zone;\n        this.afterChange = new EventEmitter();\n        this.beforeChange = new EventEmitter();\n        this.breakpoint = new EventEmitter();\n        this.destroy = new EventEmitter();\n        this.slides = [];\n        this.initialized = false;\n    }\n    /**\n     * On component destroy\n     * @return {?}\n     */\n    SlickComponent.prototype.ngOnDestroy = function () {\n        this.unslick();\n    };\n    /**\n     * On component view init\n     * @return {?}\n     */\n    SlickComponent.prototype.ngAfterViewInit = function () {\n    };\n    /**\n     * init slick\n     * @return {?}\n     */\n    SlickComponent.prototype.initSlick = function () {\n        var _this = this;\n        var /** @type {?} */ self = this;\n        this.zone.runOutsideAngular(function () {\n            _this.$instance = $(_this.el.nativeElement).slick(_this.config);\n            _this.initialized = true;\n            _this.$instance.on('afterChange', function (event, slick, currentSlide) {\n                self.zone.run(function () {\n                    self.afterChange.emit({ event: event, slick: slick, currentSlide: currentSlide });\n                });\n            });\n            _this.$instance.on('beforeChange', function (event, slick, currentSlide, nextSlide) {\n                self.zone.run(function () {\n                    self.beforeChange.emit({ event: event, slick: slick, currentSlide: currentSlide, nextSlide: nextSlide });\n                });\n            });\n            _this.$instance.on('breakpoint', function (event, slick, breakpoint) {\n                self.zone.run(function () {\n                    self.breakpoint.emit({ event: event, slick: slick, breakpoint: breakpoint });\n                });\n            });\n            _this.$instance.on('destroy', function (event, slick) {\n                self.zone.run(function () {\n                    self.destroy.emit({ event: event, slick: slick });\n                });\n            });\n        });\n    };\n    /**\n     * @param {?} slickItem\n     * @return {?}\n     */\n    SlickComponent.prototype.addSlide = function (slickItem) {\n        if (!this.initialized) {\n            this.initSlick();\n        }\n        this.slides.push(slickItem);\n        this.$instance.slick('slickAdd', slickItem.el.nativeElement);\n    };\n    /**\n     * @param {?} slickItem\n     * @return {?}\n     */\n    SlickComponent.prototype.removeSlide = function (slickItem) {\n        var /** @type {?} */ idx = this.slides.indexOf(slickItem);\n        this.$instance.slick('slickRemove', idx);\n        this.slides = this.slides.filter(function (s) { return s !== slickItem; });\n    };\n    /**\n     * Slick Method\n     * @param {?} index\n     * @return {?}\n     */\n    SlickComponent.prototype.slickGoTo = function (index) {\n        var _this = this;\n        this.zone.run(function () {\n            _this.$instance.slick('slickGoTo', index);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    SlickComponent.prototype.slickNext = function () {\n        var _this = this;\n        this.zone.run(function () {\n            _this.$instance.slick('slickNext');\n        });\n    };\n    /**\n     * @return {?}\n     */\n    SlickComponent.prototype.slickPrev = function () {\n        var _this = this;\n        this.zone.run(function () {\n            _this.$instance.slick('slickPrev');\n        });\n    };\n    /**\n     * @return {?}\n     */\n    SlickComponent.prototype.slickPause = function () {\n        var _this = this;\n        this.zone.run(function () {\n            _this.$instance.slick('slickPause');\n        });\n    };\n    /**\n     * @return {?}\n     */\n    SlickComponent.prototype.slickPlay = function () {\n        var _this = this;\n        this.zone.run(function () {\n            _this.$instance.slick('slickPlay');\n        });\n    };\n    /**\n     * @return {?}\n     */\n    SlickComponent.prototype.unslick = function () {\n        var _this = this;\n        this.zone.run(function () {\n            _this.$instance.slick('unslick');\n        });\n    };\n    return SlickComponent;\n}());\nvar SlickItemDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} el\n     * @param {?} carousel\n     */\n    function SlickItemDirective(el, carousel) {\n        this.el = el;\n        this.carousel = carousel;\n    }\n    /**\n     * @return {?}\n     */\n    SlickItemDirective.prototype.ngAfterViewInit = function () {\n        this.carousel.addSlide(this);\n    };\n    /**\n     * @return {?}\n     */\n    SlickItemDirective.prototype.ngOnDestroy = function () {\n        this.carousel.removeSlide(this);\n    };\n    return SlickItemDirective;\n}());\nvar SlickModule = /*@__PURE__*/ (function () {\n    function SlickModule() {\n    }\n    /**\n     * @return {?}\n     */\n    SlickModule.forRoot = function () {\n        return {\n            ngModule: SlickModule,\n        };\n    };\n    return SlickModule;\n}());\nexport { SlickModule, SlickComponent, SlickItemDirective };\n",null]}