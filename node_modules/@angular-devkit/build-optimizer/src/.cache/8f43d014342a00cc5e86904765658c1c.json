{"remainingRequest":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\AHLinesUI\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeScan.js","dependencies":[{"path":"D:\\AHLinesUI\\node_modules\\rxjs\\_esm5\\internal\\operators\\mergeScan.js","mtime":499162500000},{"path":"D:\\AHLinesUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522837491125},{"path":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { tryCatch } from '../util/tryCatch';\r\nimport { errorObject } from '../util/errorObject';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nexport function mergeScan(accumulator, seed, concurrent) {\r\n    if (concurrent === void 0) {\r\n        concurrent = Number.POSITIVE_INFINITY;\r\n    }\r\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\r\n}\r\nvar MergeScanOperator = /*@__PURE__*/ (function () {\r\n    function MergeScanOperator(accumulator, seed, concurrent) {\r\n        this.accumulator = accumulator;\r\n        this.seed = seed;\r\n        this.concurrent = concurrent;\r\n    }\r\n    MergeScanOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\r\n    };\r\n    return MergeScanOperator;\r\n}());\r\nexport { MergeScanOperator };\r\nvar MergeScanSubscriber = (function (_super) {\r\n    tslib_1.__extends(MergeScanSubscriber, _super);\r\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.accumulator = accumulator;\r\n        _this.acc = acc;\r\n        _this.concurrent = concurrent;\r\n        _this.hasValue = false;\r\n        _this.hasCompleted = false;\r\n        _this.buffer = [];\r\n        _this.active = 0;\r\n        _this.index = 0;\r\n        return _this;\r\n    }\r\n    MergeScanSubscriber.prototype._next = function (value) {\r\n        if (this.active < this.concurrent) {\r\n            var index = this.index++;\r\n            var ish = tryCatch(this.accumulator)(this.acc, value);\r\n            var destination = this.destination;\r\n            if (ish === errorObject) {\r\n                destination.error(errorObject.e);\r\n            }\r\n            else {\r\n                this.active++;\r\n                this._innerSub(ish, value, index);\r\n            }\r\n        }\r\n        else {\r\n            this.buffer.push(value);\r\n        }\r\n    };\r\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\r\n        this.add(subscribeToResult(this, ish, value, index));\r\n    };\r\n    MergeScanSubscriber.prototype._complete = function () {\r\n        this.hasCompleted = true;\r\n        if (this.active === 0 && this.buffer.length === 0) {\r\n            if (this.hasValue === false) {\r\n                this.destination.next(this.acc);\r\n            }\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        var destination = this.destination;\r\n        this.acc = innerValue;\r\n        this.hasValue = true;\r\n        destination.next(innerValue);\r\n    };\r\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        var buffer = this.buffer;\r\n        this.remove(innerSub);\r\n        this.active--;\r\n        if (buffer.length > 0) {\r\n            this._next(buffer.shift());\r\n        }\r\n        else if (this.active === 0 && this.hasCompleted) {\r\n            if (this.hasValue === false) {\r\n                this.destination.next(this.acc);\r\n            }\r\n            this.destination.complete();\r\n        }\r\n    };\r\n    return MergeScanSubscriber;\r\n}(OuterSubscriber));\r\nexport { MergeScanSubscriber };\r\n//# sourceMappingURL=mergeScan.js.map\r\n",null]}