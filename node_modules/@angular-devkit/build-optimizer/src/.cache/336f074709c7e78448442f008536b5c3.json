{"remainingRequest":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\AHLinesUI\\node_modules\\rxjs\\_esm5\\internal\\operators\\repeatWhen.js","dependencies":[{"path":"D:\\AHLinesUI\\node_modules\\rxjs\\_esm5\\internal\\operators\\repeatWhen.js","mtime":499162500000},{"path":"D:\\AHLinesUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522837491125},{"path":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Subject } from '../Subject';\r\nimport { tryCatch } from '../util/tryCatch';\r\nimport { errorObject } from '../util/errorObject';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nexport function repeatWhen(notifier) {\r\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\r\n}\r\nvar RepeatWhenOperator = /*@__PURE__*/ (function () {\r\n    function RepeatWhenOperator(notifier) {\r\n        this.notifier = notifier;\r\n    }\r\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\r\n    };\r\n    return RepeatWhenOperator;\r\n}());\r\nvar RepeatWhenSubscriber = (function (_super) {\r\n    tslib_1.__extends(RepeatWhenSubscriber, _super);\r\n    function RepeatWhenSubscriber(destination, notifier, source) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.notifier = notifier;\r\n        _this.source = source;\r\n        _this.sourceIsBeingSubscribedTo = true;\r\n        return _this;\r\n    }\r\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.sourceIsBeingSubscribedTo = true;\r\n        this.source.subscribe(this);\r\n    };\r\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        if (this.sourceIsBeingSubscribedTo === false) {\r\n            return _super.prototype.complete.call(this);\r\n        }\r\n    };\r\n    RepeatWhenSubscriber.prototype.complete = function () {\r\n        this.sourceIsBeingSubscribedTo = false;\r\n        if (!this.isStopped) {\r\n            if (!this.retries) {\r\n                this.subscribeToRetries();\r\n            }\r\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\r\n                return _super.prototype.complete.call(this);\r\n            }\r\n            this._unsubscribeAndRecycle();\r\n            this.notifications.next();\r\n        }\r\n    };\r\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\r\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\r\n        if (notifications) {\r\n            notifications.unsubscribe();\r\n            this.notifications = null;\r\n        }\r\n        if (retriesSubscription) {\r\n            retriesSubscription.unsubscribe();\r\n            this.retriesSubscription = null;\r\n        }\r\n        this.retries = null;\r\n    };\r\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\r\n        var _unsubscribe = this._unsubscribe;\r\n        this._unsubscribe = null;\r\n        _super.prototype._unsubscribeAndRecycle.call(this);\r\n        this._unsubscribe = _unsubscribe;\r\n        return this;\r\n    };\r\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\r\n        this.notifications = new Subject();\r\n        var retries = tryCatch(this.notifier)(this.notifications);\r\n        if (retries === errorObject) {\r\n            return _super.prototype.complete.call(this);\r\n        }\r\n        this.retries = retries;\r\n        this.retriesSubscription = subscribeToResult(this, retries);\r\n    };\r\n    return RepeatWhenSubscriber;\r\n}(OuterSubscriber));\r\n//# sourceMappingURL=repeatWhen.js.map\r\n",null]}