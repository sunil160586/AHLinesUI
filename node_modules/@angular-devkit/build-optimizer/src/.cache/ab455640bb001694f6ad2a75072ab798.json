{"remainingRequest":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\AHLinesUI\\node_modules\\ngx-pagination\\dist\\ngx-pagination.js","dependencies":[{"path":"D:\\AHLinesUI\\node_modules\\ngx-pagination\\dist\\ngx-pagination.js","mtime":1524470694000},{"path":"D:\\AHLinesUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522837491125},{"path":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nvar PaginationService = /*@__PURE__*/ (function () {\n    function PaginationService() {\n        this.change = new EventEmitter();\n        this.instances = {};\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\n    }\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\n    PaginationService.prototype.register = function (instance) {\n        if (!instance.id) {\n            instance.id = this.DEFAULT_ID;\n        }\n        if (!this.instances[instance.id]) {\n            this.instances[instance.id] = instance;\n            this.change.emit(instance.id);\n        }\n        else {\n            var changed = this.updateInstance(instance);\n            if (changed) {\n                this.change.emit(instance.id);\n            }\n        }\n    };\n    /**\n     * Check each property of the instance and update any that have changed. Return\n     * true if any changes were made, else return false.\n     */\n    PaginationService.prototype.updateInstance = function (instance) {\n        var changed = false;\n        for (var prop in this.instances[instance.id]) {\n            if (instance[prop] !== this.instances[instance.id][prop]) {\n                this.instances[instance.id][prop] = instance[prop];\n                changed = true;\n            }\n        }\n        return changed;\n    };\n    /**\n     * Returns the current page number.\n     */\n    PaginationService.prototype.getCurrentPage = function (id) {\n        if (this.instances[id]) {\n            return this.instances[id].currentPage;\n        }\n    };\n    /**\n     * Sets the current page number.\n     */\n    PaginationService.prototype.setCurrentPage = function (id, page) {\n        if (this.instances[id]) {\n            var instance = this.instances[id];\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\n            if (page <= maxPage && 1 <= page) {\n                this.instances[id].currentPage = page;\n                this.change.emit(id);\n            }\n        }\n    };\n    /**\n     * Sets the value of instance.totalItems\n     */\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\n        if (this.instances[id] && 0 <= totalItems) {\n            this.instances[id].totalItems = totalItems;\n            this.change.emit(id);\n        }\n    };\n    /**\n     * Sets the value of instance.itemsPerPage.\n     */\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\n        if (this.instances[id]) {\n            this.instances[id].itemsPerPage = itemsPerPage;\n            this.change.emit(id);\n        }\n    };\n    /**\n     * Returns a clone of the pagination instance object matching the id. If no\n     * id specified, returns the instance corresponding to the default id.\n     */\n    PaginationService.prototype.getInstance = function (id) {\n        if (id === void 0) {\n            id = this.DEFAULT_ID;\n        }\n        if (this.instances[id]) {\n            return this.clone(this.instances[id]);\n        }\n        return {};\n    };\n    /**\n     * Perform a shallow clone of an object.\n     */\n    PaginationService.prototype.clone = function (obj) {\n        var target = {};\n        for (var i in obj) {\n            if (obj.hasOwnProperty(i)) {\n                target[i] = obj[i];\n            }\n        }\n        return target;\n    };\n    return PaginationService;\n}());\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\nvar PaginatePipe = /*@__PURE__*/ (function () {\n    function PaginatePipe(service) {\n        this.service = service;\n        // store the values from the last time the pipe was invoked\n        this.state = {};\n    }\n    PaginatePipe.prototype.transform = function (collection, args) {\n        // When an observable is passed through the AsyncPipe, it will output\n        // `null` until the subscription resolves. In this case, we want to\n        // use the cached data from the `state` object to prevent the NgFor\n        // from flashing empty until the real values arrive.\n        if (args instanceof Array) {\n            // compatible with angular2 before beta16\n            args = args[0];\n        }\n        if (!(collection instanceof Array)) {\n            var _id = args.id || this.service.defaultId;\n            if (this.state[_id]) {\n                return this.state[_id].slice;\n            }\n            else {\n                return collection;\n            }\n        }\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\n        var instance = this.createInstance(collection, args);\n        var id = instance.id;\n        var start, end;\n        var perPage = instance.itemsPerPage;\n        this.service.register(instance);\n        if (!serverSideMode && collection instanceof Array) {\n            perPage = +perPage || LARGE_NUMBER;\n            start = (instance.currentPage - 1) * perPage;\n            end = start + perPage;\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\n            if (isIdentical) {\n                return this.state[id].slice;\n            }\n            else {\n                var slice = collection.slice(start, end);\n                this.saveState(id, collection, slice, start, end);\n                this.service.change.emit(id);\n                return slice;\n            }\n        }\n        // save the state for server-side collection to avoid null\n        // flash as new data loads.\n        this.saveState(id, collection, collection, start, end);\n        return collection;\n    };\n    /**\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\n     */\n    PaginatePipe.prototype.createInstance = function (collection, args) {\n        var config = args;\n        this.checkConfig(config);\n        return {\n            id: config.id || this.service.defaultId(),\n            itemsPerPage: +config.itemsPerPage || 0,\n            currentPage: +config.currentPage || 1,\n            totalItems: +config.totalItems || collection.length\n        };\n    };\n    /**\n     * Ensure the argument passed to the filter contains the required properties.\n     */\n    PaginatePipe.prototype.checkConfig = function (config) {\n        var required = ['itemsPerPage', 'currentPage'];\n        var missing = required.filter(function (prop) { return !(prop in config); });\n        if (0 < missing.length) {\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\n        }\n    };\n    /**\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\n     * need to check that the collection, start and end points are all identical, and if so, return the\n     * last sliced array.\n     */\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\n        this.state[id] = {\n            collection: collection,\n            size: collection.length,\n            slice: slice,\n            start: start,\n            end: end\n        };\n    };\n    /**\n     * For a given id, returns true if the collection, size, start and end values are identical.\n     */\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\n        var state = this.state[id];\n        if (!state) {\n            return false;\n        }\n        var isMetaDataIdentical = state.size === collection.length &&\n            state.start === start &&\n            state.end === end;\n        if (!isMetaDataIdentical) {\n            return false;\n        }\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\n    };\n    return PaginatePipe;\n}());\n/**\n * The default template and styles for the pagination links are borrowed directly\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\n */\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" *ngFor=\\\"let page of p.pages\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ page.label }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ page.label }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination .ellipsis::after {\\n    content: '\\u2026';\\n    padding: 0.1875rem 0.625rem;\\n    color: #0a0a0a; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\";\n/**\n * The default pagination controls component. Actually just a default implementation of a custom template.\n */\nvar PaginationControlsComponent = /*@__PURE__*/ (function () {\n    function PaginationControlsComponent() {\n        this.maxSize = 7;\n        this.previousLabel = 'Previous';\n        this.nextLabel = 'Next';\n        this.screenReaderPaginationLabel = 'Pagination';\n        this.screenReaderPageLabel = 'page';\n        this.screenReaderCurrentLabel = \"You're on page\";\n        this.pageChange = new EventEmitter();\n        this._directionLinks = true;\n        this._autoHide = false;\n    }\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\n        get: function () {\n            return this._directionLinks;\n        },\n        set: function (value) {\n            this._directionLinks = !!value && value !== 'false';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\n        get: function () {\n            return this._autoHide;\n        },\n        set: function (value) {\n            this._autoHide = !!value && value !== 'false';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PaginationControlsComponent;\n}());\n/**\n * This directive is what powers all pagination controls components, including the default one.\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\n * with the pagination controls.\n */\nvar PaginationControlsDirective = /*@__PURE__*/ (function () {\n    function PaginationControlsDirective(service, changeDetectorRef) {\n        var _this = this;\n        this.service = service;\n        this.changeDetectorRef = changeDetectorRef;\n        this.maxSize = 7;\n        this.pageChange = new EventEmitter();\n        this.pages = [];\n        this.changeSub = this.service.change\n            .subscribe(function (id) {\n            if (_this.id === id) {\n                _this.updatePageLinks();\n                _this.changeDetectorRef.markForCheck();\n                _this.changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    PaginationControlsDirective.prototype.ngOnInit = function () {\n        if (this.id === undefined) {\n            this.id = this.service.defaultId();\n        }\n        this.updatePageLinks();\n    };\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\n        this.updatePageLinks();\n    };\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\n        this.changeSub.unsubscribe();\n    };\n    /**\n     * Go to the previous page\n     */\n    PaginationControlsDirective.prototype.previous = function () {\n        this.checkValidId();\n        this.setCurrent(this.getCurrent() - 1);\n    };\n    /**\n     * Go to the next page\n     */\n    PaginationControlsDirective.prototype.next = function () {\n        this.checkValidId();\n        this.setCurrent(this.getCurrent() + 1);\n    };\n    /**\n     * Returns true if current page is first page\n     */\n    PaginationControlsDirective.prototype.isFirstPage = function () {\n        return this.getCurrent() === 1;\n    };\n    /**\n     * Returns true if current page is last page\n     */\n    PaginationControlsDirective.prototype.isLastPage = function () {\n        return this.getLastPage() === this.getCurrent();\n    };\n    /**\n     * Set the current page number.\n     */\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\n        this.pageChange.emit(page);\n    };\n    /**\n     * Get the current page number.\n     */\n    PaginationControlsDirective.prototype.getCurrent = function () {\n        return this.service.getCurrentPage(this.id);\n    };\n    /**\n     * Returns the last page number\n     */\n    PaginationControlsDirective.prototype.getLastPage = function () {\n        var inst = this.service.getInstance(this.id);\n        if (inst.totalItems < 1) {\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\n            // but it makes sense to consider a single, empty page as the last page.\n            return 1;\n        }\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\n    };\n    PaginationControlsDirective.prototype.checkValidId = function () {\n        if (!this.service.getInstance(this.id).id) {\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\n        }\n    };\n    /**\n     * Updates the page links and checks that the current page is valid. Should run whenever the\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\n     * input values changes.\n     */\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\n        var _this = this;\n        var inst = this.service.getInstance(this.id);\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\n        if (correctedCurrentPage !== inst.currentPage) {\n            setTimeout(function () {\n                _this.setCurrent(correctedCurrentPage);\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\n            });\n        }\n        else {\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n        }\n    };\n    /**\n     * Checks that the instance.currentPage property is within bounds for the current page range.\n     * If not, return a correct value for currentPage, or the current value if OK.\n     */\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n        if (totalPages < instance.currentPage && 0 < totalPages) {\n            return totalPages;\n        }\n        else if (instance.currentPage < 1) {\n            return 1;\n        }\n        return instance.currentPage;\n    };\n    /**\n     * Returns an array of Page objects to use in the pagination controls.\n     */\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\n        // paginationRange could be a string if passed from attribute, so cast to number.\n        paginationRange = +paginationRange;\n        var pages = [];\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\n        var halfWay = Math.ceil(paginationRange / 2);\n        var isStart = currentPage <= halfWay;\n        var isEnd = totalPages - halfWay < currentPage;\n        var isMiddle = !isStart && !isEnd;\n        var ellipsesNeeded = paginationRange < totalPages;\n        var i = 1;\n        while (i <= totalPages && i <= paginationRange) {\n            var label = void 0;\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\n                label = '...';\n            }\n            else {\n                label = pageNumber;\n            }\n            pages.push({\n                label: label,\n                value: pageNumber\n            });\n            i++;\n        }\n        return pages;\n    };\n    /**\n     * Given the position in the sequence of pagination links [i],\n     * figure out what page number corresponds to that position.\n     */\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\n        var halfWay = Math.ceil(paginationRange / 2);\n        if (i === paginationRange) {\n            return totalPages;\n        }\n        else if (i === 1) {\n            return i;\n        }\n        else if (paginationRange < totalPages) {\n            if (totalPages - halfWay < currentPage) {\n                return totalPages - paginationRange + i;\n            }\n            else if (halfWay < currentPage) {\n                return currentPage - halfWay + i;\n            }\n            else {\n                return i;\n            }\n        }\n        else {\n            return i;\n        }\n    };\n    return PaginationControlsDirective;\n}());\nvar NgxPaginationModule = /*@__PURE__*/ (function () {\n    function NgxPaginationModule() {\n    }\n    return NgxPaginationModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n",null]}