{"remainingRequest":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\AHLinesUI\\node_modules\\rxjs\\_esm5\\internal\\operators\\windowWhen.js","dependencies":[{"path":"D:\\AHLinesUI\\node_modules\\rxjs\\_esm5\\internal\\operators\\windowWhen.js","mtime":499162500000},{"path":"D:\\AHLinesUI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1522837491125},{"path":"D:\\AHLinesUI\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { Subject } from '../Subject';\r\nimport { tryCatch } from '../util/tryCatch';\r\nimport { errorObject } from '../util/errorObject';\r\nimport { OuterSubscriber } from '../OuterSubscriber';\r\nimport { subscribeToResult } from '../util/subscribeToResult';\r\nexport function windowWhen(closingSelector) {\r\n    return function windowWhenOperatorFunction(source) {\r\n        return source.lift(new WindowOperator(closingSelector));\r\n    };\r\n}\r\nvar WindowOperator = /*@__PURE__*/ (function () {\r\n    function WindowOperator(closingSelector) {\r\n        this.closingSelector = closingSelector;\r\n    }\r\n    WindowOperator.prototype.call = function (subscriber, source) {\r\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\r\n    };\r\n    return WindowOperator;\r\n}());\r\nvar WindowSubscriber = (function (_super) {\r\n    tslib_1.__extends(WindowSubscriber, _super);\r\n    function WindowSubscriber(destination, closingSelector) {\r\n        var _this = _super.call(this, destination) || this;\r\n        _this.destination = destination;\r\n        _this.closingSelector = closingSelector;\r\n        _this.openWindow();\r\n        return _this;\r\n    }\r\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\r\n        this.openWindow(innerSub);\r\n    };\r\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\r\n        this._error(error);\r\n    };\r\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\r\n        this.openWindow(innerSub);\r\n    };\r\n    WindowSubscriber.prototype._next = function (value) {\r\n        this.window.next(value);\r\n    };\r\n    WindowSubscriber.prototype._error = function (err) {\r\n        this.window.error(err);\r\n        this.destination.error(err);\r\n        this.unsubscribeClosingNotification();\r\n    };\r\n    WindowSubscriber.prototype._complete = function () {\r\n        this.window.complete();\r\n        this.destination.complete();\r\n        this.unsubscribeClosingNotification();\r\n    };\r\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\r\n        if (this.closingNotification) {\r\n            this.closingNotification.unsubscribe();\r\n        }\r\n    };\r\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\r\n        if (innerSub === void 0) {\r\n            innerSub = null;\r\n        }\r\n        if (innerSub) {\r\n            this.remove(innerSub);\r\n            innerSub.unsubscribe();\r\n        }\r\n        var prevWindow = this.window;\r\n        if (prevWindow) {\r\n            prevWindow.complete();\r\n        }\r\n        var window = this.window = new Subject();\r\n        this.destination.next(window);\r\n        var closingNotifier = tryCatch(this.closingSelector)();\r\n        if (closingNotifier === errorObject) {\r\n            var err = errorObject.e;\r\n            this.destination.error(err);\r\n            this.window.error(err);\r\n        }\r\n        else {\r\n            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\r\n        }\r\n    };\r\n    return WindowSubscriber;\r\n}(OuterSubscriber));\r\n//# sourceMappingURL=windowWhen.js.map\r\n",null]}